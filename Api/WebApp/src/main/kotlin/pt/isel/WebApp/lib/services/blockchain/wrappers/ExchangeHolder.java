package pt.isel.WebApp.lib.services.blockchain.wrappers;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ExchangeHolder extends Contract {
    //public static final String BINARY = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ea0806100606000396000f3fe6080604052600436106100555760003560e01c8063278ecde11461005a5780632839fc2914610083578063b6adaaff146100c5578063c290d691146100ee578063ce3f865f1461010a578063f5c636c714610133575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610a45565b61015c565b005b34801561008f57600080fd5b506100aa60048036038101906100a59190610a45565b610312565b6040516100bc96959493929190610add565b60405180910390f35b3480156100d157600080fd5b506100ec60048036038101906100e79190610a45565b6103a8565b005b61010860048036038101906101039190610a45565b6104cc565b005b34801561011657600080fd5b50610131600480360381019061012c9190610a45565b610689565b005b34801561013f57600080fd5b5061015a60048036038101906101559190610b6a565b61081c565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e290610c2e565b60405180910390fd5b6001600083815260200190815260200160002060040160009054906101000a900460ff16801561023c57506001600083815260200190815260200160002060040160019054906101000a900460ff16155b61027b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027290610c9a565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60016000858152602001908152602001600020600001549081150290604051600060405180830381858888f1935050505015801561030d573d6000803e3d6000fd5b505050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16905086565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042e90610c2e565b60405180910390fd5b6001600083815260200190815260200160002060040160009054906101000a900460ff1661049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190610d06565b60405180910390fd5b600180600084815260200190815260200160002060040160016101000a81548160ff0219169083151502179055505050565b60016000828152602001908152602001600020600001543414801561051257506001600082815260200190815260200160002060040160009054906101000a900460ff16155b610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054890610d72565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610603573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610601573d6000803e3d6000fd5b505b336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180600083815260200190815260200160002060040160006101000a81548160ff02191690831515021790555050565b6001600082815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072490610dde565b60405180910390fd5b6001600082815260200190815260200160002060040160019054906101000a900460ff16801561077d57506001600082815260200190815260200160002060040160009054906101000a900460ff165b6107bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b390610e4a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc60016000848152602001908152602001600020600001549081150290604051600060405180830381858888f19350505050158015610818573d6000803e3d6000fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a290610c2e565b60405180910390fd5b6040518060c00160405280858152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160001515815250600160008781526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548160ff0219169083151502179055509050505050505050565b600080fd5b6000819050919050565b610a2281610a0f565b8114610a2d57600080fd5b50565b600081359050610a3f81610a19565b92915050565b600060208284031215610a5b57610a5a610a0a565b5b6000610a6984828501610a30565b91505092915050565b610a7b81610a0f565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aac82610a81565b9050919050565b610abc81610aa1565b82525050565b60008115159050919050565b610ad781610ac2565b82525050565b600060c082019050610af26000830189610a72565b610aff6020830188610ab3565b610b0c6040830187610ab3565b610b196060830186610a72565b610b266080830185610ace565b610b3360a0830184610ace565b979650505050505050565b610b4781610aa1565b8114610b5257600080fd5b50565b600081359050610b6481610b3e565b92915050565b60008060008060808587031215610b8457610b83610a0a565b5b6000610b9287828801610a30565b9450506020610ba387828801610a30565b9350506040610bb487828801610b55565b9250506060610bc587828801610a30565b91505092959194509250565b600082825260208201905092915050565b7f556e617574686f72697a656420757365722e0000000000000000000000000000600082015250565b6000610c18601283610bd1565b9150610c2382610be2565b602082019050919050565b60006020820190508181036000830152610c4781610c0b565b9050919050565b7f4e6f2066756e647320746f20726566756e642e00000000000000000000000000600082015250565b6000610c84601383610bd1565b9150610c8f82610c4e565b602082019050919050565b60006020820190508181036000830152610cb381610c77565b9050919050565b7f45786368616e676520686173206e6f74206265656e207061796564207965742e600082015250565b6000610cf0602083610bd1565b9150610cfb82610cba565b602082019050919050565b60006020820190508181036000830152610d1f81610ce3565b9050919050565b7f496e636f7272656374207472616e73616374696f6e20616d6f756e742e000000600082015250565b6000610d5c601d83610bd1565b9150610d6782610d26565b602082019050919050565b60006020820190508181036000830152610d8b81610d4f565b9050919050565b7f496e76616c696420757365722e00000000000000000000000000000000000000600082015250565b6000610dc8600d83610bd1565b9150610dd382610d92565b602082019050919050565b60006020820190508181036000830152610df781610dbb565b9050919050565b7f4f72646572206e6f742079657420636f6d706c657465642e0000000000000000600082015250565b6000610e34601883610bd1565b9150610e3f82610dfe565b602082019050919050565b60006020820190508181036000830152610e6381610e27565b905091905056fea264697066735822122060ddceb317f74c9a5739c46ccec0d8979df5c086406766a6863d3dbde594d2c964736f6c634300080f0033";
    public static final String BINARY = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ea1806100606000396000f3fe6080604052600436106100555760003560e01c8063278ecde11461005a5780632839fc2914610083578063b6adaaff146100c5578063c290d691146100ee578063ce3f865f1461010a578063f5c636c714610133575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c9190610a35565b61015c565b005b34801561008f57600080fd5b506100aa60048036038101906100a59190610a35565b610312565b6040516100bc96959493929190610c88565b60405180910390f35b3480156100d157600080fd5b506100ec60048036038101906100e79190610a35565b6103a8565b005b61010860048036038101906101039190610a35565b6104cc565b005b34801561011657600080fd5b50610131600480360381019061012c9190610a35565b61068a565b005b34801561013f57600080fd5b5061015a60048036038101906101559190610a62565b61081d565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e290610c08565b60405180910390fd5b6001600083815260200190815260200160002060040160009054906101000a900460ff16801561023c57506001600083815260200190815260200160002060040160019054906101000a900460ff16155b61027b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027290610bc8565b60405180910390fd5b6001600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60016000858152602001908152602001600020600001549081150290604051600060405180830381858888f1935050505015801561030d573d6000803e3d6000fd5b505050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900460ff16905086565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610437576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042e90610c08565b60405180910390fd5b6001600083815260200190815260200160002060040160009054906101000a900460ff1661049a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049190610c28565b60405180910390fd5b600180600084815260200190815260200160002060040160016101000a81548160ff0219169083151502179055505050565b60016000828152602001908152602001600020600001543414801561051257506001600082815260200190815260200160002060040160009054906101000a900460ff16155b610551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054890610c48565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610604573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610602573d6000803e3d6000fd5b505b336001600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600180600083815260200190815260200160002060040160006101000a81548160ff02191690831515021790555050565b6001600082815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590610be8565b60405180910390fd5b6001600082815260200190815260200160002060040160019054906101000a900460ff16801561077e57506001600082815260200190815260200160002060040160009054906101000a900460ff165b6107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490610c68565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc60016000848152602001908152602001600020600001549081150290604051600060405180830381858888f19350505050158015610819573d6000803e3d6000fd5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390610c08565b60405180910390fd5b6040518060c00160405280858152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160001515815250600160008781526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548160ff02191690831515021790555060a08201518160040160016101000a81548160ff0219169083151502179055509050505050505050565b600081359050610a1a81610e3d565b92915050565b600081359050610a2f81610e54565b92915050565b600060208284031215610a4b57610a4a610d42565b5b6000610a5984828501610a20565b91505092915050565b60008060008060808587031215610a7c57610a7b610d42565b5b6000610a8a87828801610a20565b9450506020610a9b87828801610a20565b9350506040610aac87828801610a0b565b9250506060610abd87828801610a20565b91505092959194509250565b610ad281610cfa565b82525050565b610ae181610d0c565b82525050565b6000610af4601383610ce9565b9150610aff82610d47565b602082019050919050565b6000610b17600d83610ce9565b9150610b2282610d70565b602082019050919050565b6000610b3a601283610ce9565b9150610b4582610d99565b602082019050919050565b6000610b5d602083610ce9565b9150610b6882610dc2565b602082019050919050565b6000610b80601d83610ce9565b9150610b8b82610deb565b602082019050919050565b6000610ba3601883610ce9565b9150610bae82610e14565b602082019050919050565b610bc281610d38565b82525050565b60006020820190508181036000830152610be181610ae7565b9050919050565b60006020820190508181036000830152610c0181610b0a565b9050919050565b60006020820190508181036000830152610c2181610b2d565b9050919050565b60006020820190508181036000830152610c4181610b50565b9050919050565b60006020820190508181036000830152610c6181610b73565b9050919050565b60006020820190508181036000830152610c8181610b96565b9050919050565b600060c082019050610c9d6000830189610bb9565b610caa6020830188610ac9565b610cb76040830187610ac9565b610cc46060830186610bb9565b610cd16080830185610ad8565b610cde60a0830184610ad8565b979650505050505050565b600082825260208201905092915050565b6000610d0582610d18565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b7f4e6f2066756e647320746f20726566756e642e00000000000000000000000000600082015250565b7f496e76616c696420757365722e00000000000000000000000000000000000000600082015250565b7f556e617574686f72697a656420757365722e0000000000000000000000000000600082015250565b7f45786368616e676520686173206e6f74206265656e207061796564207965742e600082015250565b7f496e636f7272656374207472616e73616374696f6e20616d6f756e742e000000600082015250565b7f4f72646572206e6f742079657420636f6d706c657465642e0000000000000000600082015250565b610e4681610cfa565b8114610e5157600080fd5b50565b610e5d81610d38565b8114610e6857600080fd5b5056fea2646970667358221220ea989980a461d42107bda6a36599482c09e50b35a358c8a3e3ff3a73addd0f6764736f6c63430008070033";

    public static final String FUNC_COLLECT = "collect";

    public static final String FUNC_COMPLETEORDER = "completeOrder";

    public static final String FUNC_EXCHANGES = "exchanges";

    public static final String FUNC_NEWEXCHANGE = "newExchange";

    public static final String FUNC_PAY = "pay";

    public static final String FUNC_REFUND = "refund";

    @Deprecated
    protected ExchangeHolder(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ExchangeHolder(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ExchangeHolder(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ExchangeHolder(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> collect(BigInteger _id) {
        final Function function = new Function(
                FUNC_COLLECT, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> completeOrder(BigInteger _id) {
        final Function function = new Function(
                FUNC_COMPLETEORDER, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple6<BigInteger, String, String, BigInteger, Boolean, Boolean>> exchanges(BigInteger param0) {
        final Function function = new Function(FUNC_EXCHANGES, 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple6<BigInteger, String, String, BigInteger, Boolean, Boolean>>(function,
                new Callable<Tuple6<BigInteger, String, String, BigInteger, Boolean, Boolean>>() {
                    @Override
                    public Tuple6<BigInteger, String, String, BigInteger, Boolean, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, String, BigInteger, Boolean, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (Boolean) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> newExchange(BigInteger _id, BigInteger _price, String _destination, BigInteger _end_date) {
        final Function function = new Function(
                FUNC_NEWEXCHANGE, 
                Arrays.<Type>asList(new Uint256(_id),
                new Uint256(_price),
                new Address(160, _destination),
                new Uint256(_end_date)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pay(BigInteger _id) {
        final Function function = new Function(
                FUNC_PAY, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refund(BigInteger _id) {
        final Function function = new Function(
                FUNC_REFUND, 
                Arrays.<Type>asList(new Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ExchangeHolder load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ExchangeHolder(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ExchangeHolder load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ExchangeHolder(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ExchangeHolder load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ExchangeHolder(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ExchangeHolder load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ExchangeHolder(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ExchangeHolder> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ExchangeHolder.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<ExchangeHolder> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ExchangeHolder.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ExchangeHolder> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ExchangeHolder.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ExchangeHolder> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ExchangeHolder.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
